{"version":3,"sources":["app/slider.cljs"],"mappings":";AA6CA,uBAAA,vBAAMA;AAAN,AACE,mBAAA,ZAACC;;AACH,uBAAA,vBAAMC;AAAN,AAAA;;AAGA,AAAKC,oBAAO,gDAAA,mFAAA,2CAAA,qDAAA,QAAA,sDAAA,IAAA,oEAAA,+BAAA,kFAAA,iIAAA,8DAAA,GAAA,6DAAA,gBAAA,0EAAA,4BAAA,2CAAA,qDAAA,GAAA,sDAAA,IAAA,oEAAA,+BAAA,kFAAA,iIAAA,8DAAA,GAAA,6DAAA,SAAA,0EAAA,4BAAA,2CAAA,qDAAA,GAAA,sDAAA,IAAA,oEAAA,+BAAA,kFAAA,iIAAA,8DAAA,GAAA,6DAAA,UAAA,0EAAA,4BAAA,2CAAA,qDAAA,GAAA,sDAAA,IAAA,oEAAA,+BAAA,kFAAA,iIAAA,8DAAA,GAAA,6DAAA,UAAA,0EAAA,r3FAACC;AA0Cb,oBAAA,pBAAMC;AAAN,AAAA,0FAAA,iEAAA,mFAAA,6EAGI,iBAAAC,qBAAA,0CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA21E+C,AAAAkB,sBAAAvB;IA31E/CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMW;AAAN,AAAA,AAAA,AAAAT,uBAAAJ,SACE,6rBAAA,gHAAA,7yBAACc,gBACA,AAAA,mFAAOD,GACP,AAAA,oFAAOA,GACP,AAAA,kGAAeA,GACf,AAAA,gHAAqBA,GACrB,AAAA,4FAAWA,GACX,AAAA,2FAAWA,GACX,AAAA,wGAAiBA,sFAChB5B,gHACAE;;AAVJ,eAAA,CAAAe,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,gCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMqB;AAAN,AAAA,OAAAH,66BAAA,AAAAH,gCAAA,AAAAI,eAAAnB,78BACE,6rBAAA,gHAAA,7yBAACsB,gBACA,AAAA,mFAAOD,GACP,AAAA,oFAAOA,GACP,AAAA,kGAAeA,GACf,AAAA,gHAAqBA,GACrB,AAAA,4FAAWA,GACX,AAAA,2FAAWA,GACX,AAAA,wGAAiBA,sFAChB5B,gHACAE;;;AAVJ;;;;GAAA,KAAA;;AAAA,AAAA,OAAAI,mBAAA,AAAAqB,gBAASxB","names":["app.slider/->Next","js/console.log","app.slider/->Prev","app.slider/slides","reagent.core.atom","app.slider/slider","iter__4622__auto__","s__46488","cljs.core/LazySeq","temp__5754__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__46490","cljs.core/chunk-buffer","i__46489","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46487","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","x","app.slide/slide","cljs.core/chunk-first"],"sourcesContent":["(ns app.slider\n  (:require [reagent.core :as r]\n            [app.slide :refer [slide]]))\n\n\n\n;; function Slider() {\n;;   const [slides, setSlides] = useState([{}]);\n\n;;   const toNext = () => {\n;;     const indexCurrent = slides.findIndex((el) => {\n;;       if (el.type !== undefined) {\n;;         return el.type === \"shown\";\n;;       }\n;;       return -1;\n;;     });\n;;     if (indexCurrent !== -1) {\n;;       slides[indexCurrent].type = \"\";\n;;       if (indexCurrent + 1 < slides.length) {\n;;         slides[indexCurrent + 1].type = \"shown\";\n;;       } else {\n;;         slides[0].type = \"shown\";\n;;       }\n;;       console.log(slides);\n;;       setSlides([...slides]);\n;;     }\n;;   };\n;;   const toPrev = () => {\n;;     const indexCurrent = slides.findIndex((el) => {\n;;       if (el.type !== undefined) {\n;;         return el.type === \"shown\";\n;;       }\n;;       return -1;\n;;     });\n;;     if (indexCurrent !== -1) {\n;;       slides[indexCurrent].type = \"\";\n;;       if (indexCurrent - 1 > -1) {\n;;         slides[indexCurrent - 1].type = \"shown\";\n;;       } else {\n;;         slides[slides.length - 1].type = \"shown\";\n;;       }\n;;       setSlides([...slides]);\n;;     }\n;;   };\n\n(defn ->Next []\n  (js/console.log \"next\"))\n(defn ->Prev []\n  ())\n\n(def slides (r/atom [\n      {\n        :type \"shown\"\n        :rait \"4\"\n        :commnetTitle \"User friendly & Customizable\"\n        :commentDescription\n          \"Bring to the table win-win survival strategies to ensure proactBring to the table win-win survival strategies to ensure proact\"\n        :userPict \"\"\n        :userName \"Zoltan Nemeth\"\n        :userIncumbency \"CEO of Pixler Lab\"\n      }\n      {\n        :type \"\"\n        :rait \"3\"\n        :commnetTitle \"User friendly & Customizable\"\n        :commentDescription\n          \"Bring to the table win-win survival strategies to ensure proactBring to the table win-win survival strategies to ensure proact\"\n        :userPict \"\"\n        :userName \"NoName\"\n        :userIncumbency \"CEO of Pixler Lab\"\n      }\n      {\n        :type \"\"\n        :rait \"4\"\n        :commnetTitle \"User friendly & Customizable\"\n        :commentDescription\n          \"Bring to the table win-win survival strategies to ensure proactBring to the table win-win survival strategies to ensure proact\"\n        :userPict \"\"\n        :userName \"NoName2\"\n        :userIncumbency \"CEO of Pixler Lab\"\n      }\n      {\n        :type \"\"\n        :rait \"2\"\n        :commnetTitle \"User friendly & Customizable\"\n        :commentDescription\n          \"Bring to the table win-win survival strategies to ensure proactBring to the table win-win survival strategies to ensure proact\"\n        :userPict \"\"\n        :userName \"NoName3\"\n        :userIncumbency \"CEO of Pixler Lab\"\n      }]))\n\n(defn slider []\n  [:div.slider\n   [:div.slider-items\n    (for [x @slides]\n      (slide\n       (:type x) \n       (:rait x) \n       (:commnetTitle x) \n       (:commentDescription x) \n       (:userPict x) \n       (:userName x) \n       (:userIncumbency x)\n       [->Next]\n       [->Prev])\n      )]])"]}